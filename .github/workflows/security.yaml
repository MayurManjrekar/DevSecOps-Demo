name: Security Checks
on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main
    paths:
      - bookshelf/**
      - .github/workflows/security.yaml

jobs:
  Linting:
    name: Code Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}/bookshelf

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        npm install
        npm install -D eslint-formatter-table

    - name: Lint with ESLint
      run: npx eslint . --output-file eslint_report.txt --format table
      continue-on-error: true

    - name: ESLint Job Summary
      if: always()
      run: |
        if [ -s eslint_report.txt ]; then
          echo "### 🛠️ ESLint Issues Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat eslint_report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No ESLint issues found." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload ESLint Report Artifact
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: bookshelf/eslint_report.txt

  Secrets-check:
    name: Secret Check 
    needs: Linting
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'Hot Deployment') }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}/bookshelf

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install gitleaks
      run: sudo apt install -y gitleaks

    - name: Run Gitleaks on aap.js
      run: gitleaks detect --config .gitleaks.toml --source . --no-git --verbose --exit-code 1 --report-path gitleaks-report.json
      continue-on-error: true

    - name: Gitleaks Job Summary
      if: always()
      run: |
        if [ -s gitleaks-results.json ]; then
          echo "### 🛑 Gitleaks detected secrets 🛑" >> $GITHUB_STEP_SUMMARY
          echo "| Rule ID | Commit | Start Line | Author | Date | Email | File |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|------------|--------|------|-------|------|" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | 
            "| \(.RuleID // "N/A") | \(.Commit // "N/A") | \(.StartLine // "N/A") | \(.Author // "N/A") | \(.Date // "N/A") | \(.Email // "N/A") | \(.File // "N/A") |"' gitleaks-results.json >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No secrets detected by Gitleaks." >> $GITHUB_STEP_SUMMARY
          fi

    - name: Upload Gitleaks Report as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: bookshelf/gitleaks-report.json

  Auditing:
    name: Security Vulnerability Check
    needs: Secrets-check
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'Hot Deployment') }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}/bookshelf
 
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: npm install

    - name: Security Scan (npm audit)
      run: npm audit --audit-level=high --json > npm_audit_report.json
      continue-on-error: true

    - name: Upload Audit Report Artifact
      uses: actions/upload-artifact@v4
      with:
        name: audit-report
        path: bookshelf/npm_audit_report.json